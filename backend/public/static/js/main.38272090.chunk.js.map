{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formatXAxis","tickItem","moment","utcOffset","format","App","state","data","_this2","this","axios","get","then","res","setState","console","log","react_default","a","createElement","es6","width","height","margin","top","right","left","bottom","type","dataKey","domain","tickFormatter","strokeDasharray","labelFormatter","name","stroke","activeDot","r","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mUAUA,SAASA,EAAYC,GAEjB,OAAOC,IAAOD,GAAUE,UAAU,IAAIC,OAAO,wBAsClCC,6MAhCXC,MAAQ,CACJC,KAAM,uFAGU,IAAAC,EAAAC,KAChBC,IAAMC,IAAI,eACLC,KAAK,SAAAC,GACFL,EAAKM,SAAS,CACVP,KAAMM,EAAIN,0CAOtB,OADAQ,QAAQC,IAAIP,KAAKH,OAEbW,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,KAC1CL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,MAAO,IAAMC,OAAQ,IAAKf,KAAME,KAAKH,MAAMC,KAC3CgB,OAAQ,CAACC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IACrDV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOQ,KAAK,SAASC,QAAQ,UAAUC,OAAQ,CAAC,kBAAmB,mBAAoBC,cAAe/B,IACtGiB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOQ,KAAK,SAASE,OAAQ,CAAC,cAAe,iBAC7Cb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeY,gBAAgB,QAC/Bf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASa,eAAgBjC,IACzBiB,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMQ,KAAK,WAAWC,QAAQ,qBAAqBK,KAAK,YAAYC,OAAO,UAAUC,UAAW,CAACC,EAAG,KACpGpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMQ,KAAK,WAAWC,QAAQ,oBAAoBK,KAAK,WAAWC,OAAO,qBA3BvEG,IAAMC,WCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.38272090.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\nimport moment from \"moment\";\n\n\nfunction formatXAxis(tickItem) {\n// If using moment.js\n    return moment(tickItem).utcOffset(10).format('YYYY-MM-DD HH:mm')\n}\n\n\nclass App extends React.Component {\n\n    state = {\n        data: []\n    }\n\n    componentDidMount() {\n        axios.get(\"/api/recent\")\n            .then(res => {\n                this.setState({\n                    data: res.data\n                });\n            });\n    }\n\n    render() {\n        console.log(this.state)\n        return (\n            <ResponsiveContainer width=\"100%\" height={500}>\n            <LineChart width={1000} height={500} data={this.state.data}\n                       margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n                <XAxis type=\"number\" dataKey=\"created\" domain={['dataMin - 30000', 'dataMax + 30000']} tickFormatter={formatXAxis}/>\n                <YAxis type=\"number\" domain={['dataMin - 3', 'dataMax + 3']} />\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <Tooltip labelFormatter={formatXAxis}/>\n                <Legend/>\n                <Line type=\"monotone\" dataKey=\"temperatureOutside\" name=\"Outside C\" stroke=\"#8884d8\" activeDot={{r: 8}}/>\n                <Line type=\"monotone\" dataKey=\"temperatureInside\" name=\"Inside C\" stroke=\"#82ca9d\"/>\n            </LineChart>\n            </ResponsiveContainer>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}